name: "PyMathSDK-CI"

on:
  push:
    branches: [ "feature/*", "bugfix/*", "experiment/*" ]
  pull_request:
    branches: [ "develop", "main" ]
    
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      WORKING_DIR: ./PyMathSDK
      NUGET_DIR: ${{ github.workspace }}/nuget
      NUGET_SOURCE_URL: https://nuget.pkg.github.com/PyMath-Projects/index.json
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    steps:
      - name: "Checkout Branch"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Setup .NET"
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          source-url: ${{ env.NUGET_SOURCE_URL }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.WORKFLOW_ACTIONS_TOKEN }}

      - name: "Restore Dependencies"
        run: dotnet restore

      - name: "Build"
        run: dotnet build --no-restore

      - name: "Automated Tests"
        run: dotnet test --no-build --verbosity normal
        
      - name: "Install Versioning Tool"
        if: github.event_name == 'pull_request'
        run: dotnet tool install --global Versionize

      - name: "Setup Source Control"
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "mduduzi.mlilo@hotmail.com"
          git config --local user.name "Mduduzi Mlilo"
          
      - name: "Version Release"
        id: version_package_release
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.base_ref }}" == "develop" ]; then
            versionize --changelog-all --exit-insignificant-commits --pre-release alpha

          elif [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.base_ref }}" == "main" ]; then
            versionize --changelog-all --exit-insignificant-commits --aggregate-pre-releases

          else
            exit 1
          fi
        continue-on-error: true
      
      - name: "No Release Required"
        if: steps.version_package_release.outcome != 'success'
        run: echo "Skipping Release. No release required."
          
      - name: "Push Versioning Generated Code"
        if: steps.version_package_release.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.WORKFLOW_ACTIONS_TOKEN }}
          branch: ${{ github.base_ref }}
          tags: true

      - name: "Create Branch Release"
        if: steps.version_package_release.outcome == 'success'
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.WORKFLOW_ACTIONS_TOKEN }}
          script: |
            try {
              const tags_url = context.payload.repository.tags_url + "?per_page=1";
              const result = await github.request(tags_url);
              const current_tag = result.data[0].name;

              await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: current_tag,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: current_tag,
            });
            } catch (error) {
              core.setFailed(error.message);
            }
        
      - name: "Release PyMathSDK Package"
        if: steps.version_package_release.outcome == 'success'
        run: |
          current_version=$(versionize inspect)
          
          dotnet pack PyMathSDK.sln --configuration Release -p:PackageVersion=$current_version --output ${{env.NUGET_DIR}}
          
          nuget_packages=$(find "${{ env.NUGET_DIR }}" -type f -name "*.nupkg")
          
          for package in $nuget_packages; do
            dotnet nuget push "$package" --api-key "${{ secrets.WORKFLOW_ACTIONS_TOKEN }}" --source "${{ env.NUGET_SOURCE_URL }}" --skip-duplicate
          done
